"""

--------------------------------
20 January 2021 - 15:00:00 

Casuallens AI

Interview Coding Test

www.testdome.com
--------------------------------


In this challenge, you will explore a public dataset containing various 
hourly air quality measurements from a roadside sensor in an Italian city.

You can find the data here

https://archive.ics.uci.edu/ml/datasets/Air+Quality

Read the dataset information on that page carefully and answer the following questions using
python libraries.

Q-1
"______" was the maximum CO concentration recorded during May 2004.

Q-2
Looking at the highest recordings of NOX, "______" hour of the day and "______" as the
 day of the week was most common.

Q-3
"______" was the total NO2 recorded in January 2005.

Q-4
Month "______" of the "______"  year had the lowest average absolute humidity.

Q-5
Month "______" of the "______"  year had the highest variability in temperature (maximum - minimum)

Q-6
Which two columns have the most values missing? Seperate your answer with a comma.
Columns:"______" ,"______" 


Q-7

In this section you will build a linear model to predict CO concentration on hour ahead and compare
it to a simple benchmark.

Construct a new column called "target" which is the CO concentration lagged forward by one time step.

Calculate the Pearson correlation matrix for all variables.
Which 5 variables are most correlated with "target" (excluding the CO concentration itself)
from highest to lowest?

"______" 

"______" 

"______" 

"______" 

"______" 



Q-8

Use these variables(along with the CO concentration) as inputs for a linear regression predicting
the CO concentration one hour ahead. 

For simplicity we recommend using the scikit-learn LinearRegression implementation, but you should
exclude rows containing any missing values. 

Split your dataset into a training and testing set with a 60-40 ratio.

Calculate the mean absolute error, root mean squared error and coefficient of determination
("R squared") of your model on the test set.

Mean absolute error
"______" 

Root mean square error
"______" 

R squared
"______" 


Q-9

Construct a simple benchmark model that says the prediction for the CO concentration for the next
hour is the same as the current hour.

Calculate the same 3 regression metrics.

Mean absolute error
"______" 

Root mean square error
"______" 

R squared
"______" 


"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import sklearn.metrics
import math
import datetime as dt



df = pd.read_csv('11111.csv')



df.head()



df['Date']=df.Date+' '+df.Time


df['Date']=pd.to_datetime(df["Date"],format = "%d/%m/%Y %H:%M:%S")



df.set_index("Date",inplace= True)


df.drop('Time', axis=1, inplace=True)
df.drop('Unnamed: 15', axis=1, inplace=True)
df.drop('Unnamed: 16', axis=1, inplace=True)





df.head()



df.info()




"""

Q-1
"______" was the maximum CO concentration recorded during May 2004.

"""


df["CO(GT)"]["2004-04"].resample("M").max()


"""

Q-2
Looking at the highest recordings of NOX, "______" hour of the day and "______" as the
 day of the week was most common.
 
"""


df["NOx(GT)"].nlargest(10,'all').index.day_name().value_counts()


df["NOx(GT)"].nlargest(10,'all').index.hour.value_counts()


"""

Q-3
"______" was the total NO2 recorded in January 2005.

"""


df["NO2(GT)"]["2005-01"].resample("M").sum()


"""

Q-4
Month "______" of the "______"  year had the lowest average absolute humidity.

"""


df["AH"].resample("M").min().min()


df["AH"].resample("M").min()



"""

Q-5
Month "______" of the "______"  year had the highest variability in temperature (maximum - minimum)

"""

df.resample("M").agg({"T": "max"})


df["T"].nsmallest(10,"all")

df["T"].nlargest(10,'first')


df.resample("M").agg({"T": "min" })


"""

Q-6
Which two columns have the most values missing? Seperate your answer with a comma.
Columns:"______" ,"______" 

"""


df.isnull().sum(axis=0)

df.replace(to_replace = -200, value= np.NaN, inplace= True)
df.isna().sum().sort_values(ascending=False)


df.info()


"""

Q-7

In this section you will build a linear model to predict CO concentration on hour ahead and compare
it to a simple benchmark.

Construct a new column called "target" which is the CO concentration lagged forward by one time step.

Calculate the Pearson correlation matrix for all variables.
Which 5 variables are most correlated with "target" (excluding the CO concentration itself)
from highest to lowest?

"______" 

"______" 

"______" 

"______" 

"______" 



"""


df["Target"]= df["CO(GT)"].shift(1)


df.head()


#df.corr(method="pearson") = = = = = df.corr()

#df.corr(method="kendall")
#df.corr(method="spearman")


df.corr(method="pearson").sort_values(by="Target", ascending=False)



"""

Q-8

Use these variables(along with the CO concentration) as inputs for a linear regression predicting
the CO concentration one hour ahead. 

For simplicity we recommend using the scikit-learn LinearRegression implementation, but you should
exclude rows containing any missing values. 

Split your dataset into a training and testing set with a 60-40 ratio.

Calculate the mean absolute error, root mean squared error and coefficient of determination
("R squared") of your model on the test set.

Mean absolute error
"______" 

Root mean square error
"______" 

R squared
"______" 


"""




df.isnull().sum()


df.dropna(axis=0,inplace=True)



df.isnull().sum()


from sklearn.model_selection import train_test_split
X =  df[df.columns.difference(['Target'])]
Y = df["Target"]


X.info()


Y



X_train, X_test, y_train, y_test=train_test_split(X, Y, test_size=0.4)


from sklearn import linear_model
regr = linear_model.LinearRegression()
regr.fit(X_train, y_train)


y_pred=regr.predict(X_test)
y_pred[:5]


y_test



from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_test, y_pred)




from sklearn.metrics import mean_squared_error
from math import sqrt



mean_squared_error(y_test, y_pred)




# taking root of mean squared error
sqrt(mean_squared_error(y_test, y_pred))





from sklearn.metrics import r2_score
r2_score(y_test,y_pred)




"""

Q-9

Construct a simple benchmark model that says the prediction for the CO concentration for the next
hour is the same as the current hour.

Calculate the same 3 regression metrics.

Mean absolute error
"______" 

Root mean square error
"______" 

R squared
"______" 


"""





df["CO_pred"] = pd.Series(y_pred.tolist(),index=df.index[:320])





df.head()


df.info()


df.isnull().sum()





X_2 =  df[df.columns.difference(['CO(GT)'])]
Y_2 = df["CO(GT)"]






X_train_2, X_test_2, y_train_2, y_test_2 =train_test_split(X, Y, test_size=0.4)




regr_2 = linear_model.LinearRegression()
regr_2.fit(X_train_2, y_train_2)





y_pred_2=regr_2.predict(X_test_2)
y_pred_2[:5]





mean_absolute_error(y_test_2, y_pred_2)




mean_squared_error(y_test_2, y_pred_2)




# taking root of mean squared error
sqrt(mean_squared_error(y_test_2, y_pred_2))



r2_score(y_test_2,y_pred_2)




df["CO_pred_2"] = pd.Series(y_pred_2.tolist(),index=df.index[:320])




df.head()



df.info()


